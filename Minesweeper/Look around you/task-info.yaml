type: edu
custom_name: stage3
files:
- name: test/MinesweeperTest.java
  visible: false
  text: |
    import minesweeper.MainKt;
    import org.hyperskill.hstest.v6.dynamic.output.SystemOutHandler;
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.testcase.TestCase;

    import java.util.*;
    import java.util.stream.Collectors;

    public class MinesweeperTest extends BaseStageTest<Integer> {

        public MinesweeperTest() {
            super(MainKt.class);
        }

        @Override
        public List<TestCase<Integer>> generate() {
            List<TestCase<Integer>> tests = new ArrayList<>();
            for (int i = 1; i <= 50; i++) {
                TestCase<Integer> test = new TestCase<Integer>()
                    .addInput("" + i)
                    .setAttach(i);
                tests.add(test);
                tests.add(test);
            }
            return tests;
        }

        @Override
        public CheckResult check(String reply, Integer attach) {

            String outputSinceLastInput = SystemOutHandler.getDynamicOutput().trim();

            List<String> lines =
                Arrays.stream(outputSinceLastInput.split("\n"))
                    .map(String::trim)
                    .collect(Collectors.toList());

            if (lines.isEmpty()) {
                return CheckResult.FALSE(
                    "Looks like you didn't output a single line!"
                );
            }

            if (lines.size() != 9) {
                return CheckResult.FALSE(
                    "You should output exactly 9 lines of the field. Found: " + lines.size() + "."
                );
            }

            int mines = 0;

            for (String line : lines) {
                if (line.length() != 9) {
                    return CheckResult.FALSE(
                        "One of the lines of the field doesn't have 9 symbols, " +
                            "but has " + line.length() + ".\n" +
                            "This line is \"" + line + "\""
                    );
                }

                for (char c : line.toCharArray()) {
                    if (c != 'X' && c != '.' && !(c >= '0' && c <= '9')) {
                        return CheckResult.FALSE(
                            "One of the characters is not equal to 'X' or '.' or to a number.\n" +
                                "In this line: \"" + line + "\"."
                        );
                    }
                    if (c == 'X') {
                        mines++;
                    }
                }
            }

            if (attach != mines) {
                return CheckResult.FALSE(
                    "Expected to see " + attach + " mines, found " + mines
                );
            }

            int[] around = new int[] {-1, 0, 1};

            for (int y = 0; y < lines.size(); y++) {
                String line = lines.get(y);
                for (int x = 0; x < line.length(); x++) {
                    char c = line.charAt(x);

                    if (c == 'X') {
                        continue;
                    }

                    int minesAround = 0;

                    for (int dx : around) {
                        for (int dy : around) {

                            int newX = x + dx;
                            int newY = y + dy;

                            if (0 <= newX && newX < 9 &&
                                0 <= newY && newY < 9) {

                                char newC = lines.get(newY).charAt(newX);

                                if (newC == 'X') {
                                    minesAround++;
                                }
                            }
                        }
                    }

                    if (minesAround == 0 && c != '.') {
                        return CheckResult.FALSE(
                            "There are no mines around, but found number " + c + ".\n" +
                                "In line " + (y+1) + ", symbol " + (x+1) + "."
                        );
                    }

                    if (minesAround != 0 && c != '0' + minesAround) {
                        return CheckResult.FALSE(
                            "In this cell should be number " + minesAround + ", " +
                                "but found symbol \"" + c + "\".\n" +
                                "In line " + (y+1) + ", symbol " + (x+1) + "."
                        );
                    }

                }
            }

            return CheckResult.TRUE;
        }
    }
  learner_created: false
- name: src/minesweeper/Main.kt
  visible: true
  text: |-
    package minesweeper

    import java.util.Scanner
    import kotlin.math.floor
    import kotlin.random.Random

    fun main() {
        val scanner = Scanner(System.`in`)

        print("How many mines do you want on the field? ")
        val mineCount = scanner.nextInt()

        val minesweeper = Minesweeper(9, 9, mineCount)
    }

    class Minesweeper(val columns: Int, val rows: Int, mineCount: Int) {

        private val random = Random(System.currentTimeMillis())
        private lateinit var _state: State

        private val minePositions = Array(mineCount) { it }.apply {
            val set = mutableSetOf<Int>()
            while (set.size < mineCount) {
                set.add(random.nextInt(columns * rows))
            }
            set.forEachIndexed { index, i ->
                this[index] = i
            }
        }
        val blocks = Array(columns * rows) {
            if (it in minePositions) {
                Block('X')
            } else {
                Block('.')
            }
        }.apply {
            minePositions.forEach {
                val around = getAround(it)
                around.forEach { aroundIndex ->
                    this[aroundIndex].nearMines = this[aroundIndex].nearMines + 1
                }
            }
        }

        val state: State
            get() = _state

        init {
            // Show initial state
            setState(ViewState(this))
        }

        fun setState(state: State) {
            _state = state
            _state.run()
        }

        /**
         *
         * if index = 11, columns = 5, row = 5
         * then column = 1, row = 3
         *
         * if index = 0, columns = 2, row = 2
         * then column = 0, row = 0
         *
         * if index = 1, columns = 2, row = 2
         * then column = 1, row = 0
         *
         * column = (index % columns)
         * row = floor(index / columns)
         *
         * @param index The index of a point
         *
         * @return (column, row)
         */
        fun indexToPoint(index: Int): Pair<Int, Int> =
            Pair(index % columns, floor(index.toFloat() / columns).toInt())

        /**
         *
         * row * columns + column
         *
         * @param column The column of the point
         * @param row The row of the point
         *
         * @return Index of the given point
         */
        fun pointToIndex(column: Int, row: Int): Int =
            row * columns + column

        /**
         *
         * @param index The index of a point
         *
         * @return Array of indexes around the point denoted by index
         */
        fun getAround(index: Int): IntArray {
            val list = mutableListOf<Int>()
            val (pointCol, pointRow) = indexToPoint(index)

            (-1..1).forEach { row ->
                (-1..1).forEach { col ->
                    if (row != 0 || col != 0) {
                        val x = pointCol + col
                        val y = pointRow + row

                        if (x in 0 until columns && y in 0 until rows) {
                            list.add(pointToIndex(x, y))
                        }
                    }
                }
            }

            return list.toIntArray()
        }

        abstract class State(protected val minesweeper: Minesweeper) {

            abstract fun run()
        }

        data class Block(val representation: Char) {
            var nearMines: Int = 0
        }
    }

    class ViewState(minesweeper: Minesweeper) : Minesweeper.State(minesweeper) {

        override fun run() {
            repeat(minesweeper.rows) { row ->
                // Move through Y
                repeat(minesweeper.columns) { column ->
                    // Move through X
                    val block = minesweeper.blocks[minesweeper.pointToIndex(column, row)]
                    print(
                        if (block.representation == 'X' || block.nearMines == 0)
                            block.representation
                        else
                            block.nearMines
                    )
                }
                println()
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/8/stages/48/implement
status: Solved
record: -1
