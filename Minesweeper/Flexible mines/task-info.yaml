type: edu
custom_name: stage2
files:
- name: test/MinesweeperTest.java
  visible: false
  text: |
    import minesweeper.MainKt;
    import org.hyperskill.hstest.v6.dynamic.output.SystemOutHandler;
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.testcase.TestCase;

    import java.util.*;
    import java.util.stream.Collectors;

    public class MinesweeperTest extends BaseStageTest<Integer> {

        public MinesweeperTest() {
            super(MainKt.class);
        }

        @Override
        public List<TestCase<Integer>> generate() {
            List<TestCase<Integer>> tests = new ArrayList<>();
            for (int i = 1; i <= 50; i++) {
                TestCase<Integer> test = new TestCase<Integer>()
                    .addInput("" + i)
                    .setAttach(i);
                tests.add(test);
                tests.add(test);
            }
            return tests;
        }

        @Override
        public CheckResult check(String reply, Integer attach) {

            String outputSinceLastInput = SystemOutHandler.getDynamicOutput().trim();

            List<String> lines =
                Arrays.stream(outputSinceLastInput.split("\n"))
                    .map(String::trim)
                    .collect(Collectors.toList());

            if (lines.isEmpty()) {
                return CheckResult.FALSE(
                    "Looks like you didn't output a single line!"
                );
            }

            if (lines.size() != 9) {
                return CheckResult.FALSE(
                    "You should output exactly 9 lines of the field. Found: " + lines.size() + "."
                );
            }

            int mines = 0;

            for (String line : lines) {
                if (line.length() != 9) {
                    return CheckResult.FALSE(
                        "One of the lines of the field doesn't have 9 symbols, " +
                            "but has " + line.length() + ".\n" +
                            "This line is \"" + line + "\""
                    );
                }

                for (char c : line.toCharArray()) {
                    if (c != 'X' && c != '.') {
                        return CheckResult.FALSE(
                            "One of the characters is not equal to either 'X' or '.'.\n" +
                                "In this line: \"" + line + "\"."
                        );
                    }
                    if (c == 'X') {
                        mines++;
                    }
                }
            }

            if (attach != mines) {
                return CheckResult.FALSE(
                    "Expected to see " + attach + " mines, found " + mines
                );
            }

            return CheckResult.TRUE;
        }
    }
  learner_created: false
- name: src/minesweeper/Main.kt
  visible: true
  text: |-
    package minesweeper

    import kotlin.math.floor

    fun main() {
        val minesweeper = Minesweeper(9, 9)
    }

    class Minesweeper(val columns: Int, val rows: Int) {

        private lateinit var _state: State
        val blocks = Array(columns * rows) {
            val (_, row) = indexToPoint(it)
            if (row % 2 == 0)
                Block.SAFE
            else
                Block.MINE
        }

        val state: State
            get() = _state

        init {
            setState(ViewState(this))
        }

        fun setState(state: State) {
            _state = state
            _state.run()
        }

        /**
         *
         * if index = 11, columns = 5, row = 5
         * then column = 1, row = 3
         *
         * if index = 0, columns = 2, row = 2
         * then column = 0, row = 0
         *
         * if index = 1, columns = 2, row = 2
         * then column = 1, row = 0
         *
         * column = (index % columns)
         * row = floor(index / columns)
         *
         * @param index The index of a point
         *
         * @return (column, row)
         */
        fun indexToPoint(index: Int): Pair<Int, Int> =
            Pair(index % columns, floor(index.toFloat() / columns).toInt())

        /**
         *
         * row * columns + column
         *
         * @param column The column of the point
         * @param row The row of the point
         *
         * @return Index of the given point
         */
        fun pointToIndex(column: Int, row: Int): Int =
            row * columns + column

        abstract class State(protected val minesweeper: Minesweeper) {

            abstract fun run()
        }

        enum class Block(val representation: Char) {
            SAFE('.'),
            MINE('X')
        }
    }

    class ViewState(minesweeper: Minesweeper) : Minesweeper.State(minesweeper) {

        override fun run() {
            repeat(minesweeper.rows) { row ->
                // Move through Y
                repeat(minesweeper.columns) { column ->
                    // Move through X
                    print(minesweeper.blocks[minesweeper.pointToIndex(column, row)].representation)
                }
                println()
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/8/stages/47/implement
status: Solved
record: -1
